1573558970991:reload-config
1573691368586:(:cljs-quit)
1574013221928:(empty? "")
1574013234080:(every? empty? "" [])
1574013273945:(every? empty? '("" []))
1574013308202:(defn get-fork\n  "Returns the index where two strings diverge."\n  [a b]\n  (loop [a a\n         b b\n         i 0]\n    (if (or (some empty? [a b])\n            (not= (first a) (first b)))\n      i\n      (recur (rest a)\n             (rest b)\n             (inc i)))))
1574013359366:(get-fork "Youknow" "Youdont"\n          )
1574013371501:(defn get-prefix\n  "Gets substring of S from zero up to index I"\n  [s i]\n  (subs s 0 i))
1574013416398:(def fork (get-fork "I am the best." "I am noone."))
1574013417774:fork
1574013455209:(def prefix "I am the best." fork)
1574013458983:prefix
1574013493167:(def prefix (get-prefix "I am the best." fork))
1574013495486:prefix
1574013522881:(defn get-suffix\n  "Gets rest of string S after and including the character at index I"\n  [s i]\n  (subs s i))
1574013541371:(def suffix (get-suffix "I am noone." fork))
1574013542985:suffix
1574013557845:(defn cut-at\n  "Cuts string at the given index."\n  [s i]\n  [(get-prefix s i) (get-suffix s i)])
1574013574296:(cut-at "I am the best." fork)
1574013607886:(defn cut-at\n  "Cuts string at the given index."\n  [s i]\n  (get-prefix s i) (get-suffix s i))
1574013611742:(cut-at "I am the best." fork)
1574013621765:(defn cut-at\n  "Cuts string at the given index."\n  [s i]\n  \n  [(get-prefix s i) (get-suffix s i)])
1574013625554:(cut-at "I am the best." fork)
1574013667240:(defn suffix-tree\n  ([s] {:text s, :branches []})\n  ([s v] {:text s, :branches v}))
1574013678143:(suffix-tree "I am the best.")
1574013718093:(suffix-tree "I am " ["the best." "unhappy"])
1574023250133:(defn empty-tree? [t]\n  (every? empty? (vals t)))
1574023276234:(def t (suffix-tree "I am " ["the best." "unhappy"]))
1574023284744:(empty-tree? t)
1574023335742:(empty-tree? {:text "", :branches []})
1574023390162:(def suffix-a "the best.")
1574023397154:(def suffix-b "unhappy.")
1574023419789:(remove empty-tree? [(suffix-tree suffix-a) (suffix-tree suffix-b)])
1574025661059:(vector [1])
1574027305171:(remove? #(empty? (:text %)) [t]\n         )
1574027334475:(remove #(empty? (:text %)) [t])
1574027402056:(empty? {})
1574027422036:(empty? {:hey ""})
1574027445687:(remove #(empty? (:text %)) [t])
1574027459259:(remove #(empty? (:text %)) t\n        )
1574027519157:(empty? :text t)
1574027531157:(empty? (:text t))
1574027534881:t
1574027551201:(def t (suffix-tree "I am " ["the best." "unhappy"]))
1574027581836:(def t (suffix-tree "I am " ["the best." "unhappy."]))
1574027589804:t
1574027615621:(suffix-tree "hi")
1574027652353:(defn suffix-tree\n  ([] {:text "", :branches []})\n  ([p] {:text p, :branches []})\n  ([p b] {:text p, :branches (if (coll? b) b [b])}))
1574027665468:(suffix-tree "Hi.")
1574027703139:(suffix-tree "Hi, " ["I hate myself." "I am bored."])
1574027713210:(suffix-tree)
1574027734293:(def stree (suffix-tree "Hi, " ["I hate myself." "I am bored."]))
1574027736290:stree
1574027771600:(empty? (:text stree))
1574027815341:(remove #(empty? (:text %)) [stree])
1574028396139:(interleave [1 2 3 4 5] [:a :b :c :d :e])
1574028430123:(interleave [1 2 3 4 5] [:a :b :c :d :e]\n            )
1574037674020:(conj '(1 2 3) [1 2 3 4])
1574037688834:(concat [1 2 3 4] '(1 2 3))
1574037779645:(subs [1 2 3 4] 2)
1574038839038:([1 2 3 4] 0)
1574038845287:([1 2 3 4] 2\n           )
1574039506061:help
1574039509421:(help)
1574040987082:[:x (when false :y)]
1574041015031:(:text nil)
1574041024999:(keys nil)
1574041225164:(defn is-bare? (comp nil? #(every? empty? (vals %))))
1574041251819:(def is-bare? (comp nil? #(every? empty? (vals %))))
1574041276892:(is-bare? {:k "" :d []})
1574041382370:(defn is-bare? [t] (every? empty? (vals t)))
1574041415082:(def is-nil-or-bare? #(or (nil? %) (is-bare? %)))
1574041477134:(remove is-nil-or-bare? [nil nil {:text "Hi." :branches []} nil {:text "" :branches []} nil])
1574042311948:(defn splice [coll start stop]\n  (take (- stop start) (drop start coll)))\n\n(splice coll 6 10)
1574078400521:(-indexOf "I am the best." "the best.")
1574078420432:(-indexOf "I am the best." "the"\n          )
1574078460821:(.indexOf "I am the best." "the best.")
1574117093147:(reload-config)
1574117166274:(reset-autobuild)
1574120632174:(def search-term "with")
1574120673703:(def text "I am peeling honeycrisps for apple crisp. Within minutes, my hands drip with juice. My father is at the counter, making the 'crisp' part of the dessert, with cane sugar, cinnamon, lemon juice, almonds, and oats. We are listening to jazz, something calm yet dramatic, with big pockets of pregnant silence.")
1574120684231:(map #(subs % (.indexOf % search-term)) text)
1574120735605:(defn sentence-split\n  "Splits a body of text on delimiters: ('.'|'!'|'?')"\n  [text]\n  (map str/trim\n       (re-seq #"\\(?[^\\.\\?\\!]+[\\.!\\?]\\)?" text)))
1574120746972:(:require [clojure.string :as str])
1574120748983:(defn sentence-split\n  "Splits a body of text on delimiters: ('.'|'!'|'?')"\n  [text]\n  (map str/trim\n       (re-seq #"\\(?[^\\.\\?\\!]+[\\.!\\?]\\)?" text)))
1574120780929:(defn sentence-split\n  "Splits a body of text on delimiters: ('.'|'!'|'?')"\n  [text]\n  (map clojure.string/trim\n       (re-seq #"\\(?[^\\.\\?\\!]+[\\.!\\?]\\)?" text)))
1574120791860:(def sentences (sentence-split text))
1574120795392:sentences
1574120847640:(filter #(str/includes? % search-term) sentences)
1574120865605:(filter #(clojure.string/includes? % search-term) sentences)
1574120908571:(map #(subs % (.indexOf % search-term)) (filter #(clojure.string/includes? % search-term) sentences))
1574124397758:(boolean "")
1574124404878:(boolean "hi")
1574169835109:(clojure.string/lower-case \\C)
1574170014792:(empty? c)
1574170021656:(empty? \\\n        \n    c)
1574170029333:(empty? \\c)
1574170045004:(empty? "")
1574376093974:(use 'clojure.pprint)
