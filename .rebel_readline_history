1573558970991:reload-config
1573691368586:(:cljs-quit)
1574013221928:(empty? "")
1574013234080:(every? empty? "" [])
1574013273945:(every? empty? '("" []))
1574013308202:(defn get-fork\n  "Returns the index where two strings diverge."\n  [a b]\n  (loop [a a\n         b b\n         i 0]\n    (if (or (some empty? [a b])\n            (not= (first a) (first b)))\n      i\n      (recur (rest a)\n             (rest b)\n             (inc i)))))
1574013359366:(get-fork "Youknow" "Youdont"\n          )
1574013371501:(defn get-prefix\n  "Gets substring of S from zero up to index I"\n  [s i]\n  (subs s 0 i))
1574013416398:(def fork (get-fork "I am the best." "I am noone."))
1574013417774:fork
1574013455209:(def prefix "I am the best." fork)
1574013458983:prefix
1574013493167:(def prefix (get-prefix "I am the best." fork))
1574013495486:prefix
1574013522881:(defn get-suffix\n  "Gets rest of string S after and including the character at index I"\n  [s i]\n  (subs s i))
1574013541371:(def suffix (get-suffix "I am noone." fork))
1574013542985:suffix
1574013557845:(defn cut-at\n  "Cuts string at the given index."\n  [s i]\n  [(get-prefix s i) (get-suffix s i)])
1574013574296:(cut-at "I am the best." fork)
1574013607886:(defn cut-at\n  "Cuts string at the given index."\n  [s i]\n  (get-prefix s i) (get-suffix s i))
1574013611742:(cut-at "I am the best." fork)
1574013621765:(defn cut-at\n  "Cuts string at the given index."\n  [s i]\n  \n  [(get-prefix s i) (get-suffix s i)])
1574013625554:(cut-at "I am the best." fork)
1574013667240:(defn suffix-tree\n  ([s] {:text s, :branches []})\n  ([s v] {:text s, :branches v}))
1574013678143:(suffix-tree "I am the best.")
1574013718093:(suffix-tree "I am " ["the best." "unhappy"])
1574023250133:(defn empty-tree? [t]\n  (every? empty? (vals t)))
1574023276234:(def t (suffix-tree "I am " ["the best." "unhappy"]))
1574023284744:(empty-tree? t)
1574023335742:(empty-tree? {:text "", :branches []})
1574023390162:(def suffix-a "the best.")
1574023397154:(def suffix-b "unhappy.")
1574023419789:(remove empty-tree? [(suffix-tree suffix-a) (suffix-tree suffix-b)])
1574025661059:(vector [1])
1574027305171:(remove? #(empty? (:text %)) [t]\n         )
1574027334475:(remove #(empty? (:text %)) [t])
1574027402056:(empty? {})
1574027422036:(empty? {:hey ""})
1574027445687:(remove #(empty? (:text %)) [t])
1574027459259:(remove #(empty? (:text %)) t\n        )
1574027519157:(empty? :text t)
1574027531157:(empty? (:text t))
1574027534881:t
1574027551201:(def t (suffix-tree "I am " ["the best." "unhappy"]))
1574027581836:(def t (suffix-tree "I am " ["the best." "unhappy."]))
1574027589804:t
1574027615621:(suffix-tree "hi")
1574027652353:(defn suffix-tree\n  ([] {:text "", :branches []})\n  ([p] {:text p, :branches []})\n  ([p b] {:text p, :branches (if (coll? b) b [b])}))
1574027665468:(suffix-tree "Hi.")
1574027703139:(suffix-tree "Hi, " ["I hate myself." "I am bored."])
1574027713210:(suffix-tree)
1574027734293:(def stree (suffix-tree "Hi, " ["I hate myself." "I am bored."]))
1574027736290:stree
1574027771600:(empty? (:text stree))
1574027815341:(remove #(empty? (:text %)) [stree])
1574028396139:(interleave [1 2 3 4 5] [:a :b :c :d :e])
1574028430123:(interleave [1 2 3 4 5] [:a :b :c :d :e]\n            )
1574037674020:(conj '(1 2 3) [1 2 3 4])
1574037688834:(concat [1 2 3 4] '(1 2 3))
1574037779645:(subs [1 2 3 4] 2)
1574038839038:([1 2 3 4] 0)
1574038845287:([1 2 3 4] 2\n           )
1574039506061:help
1574039509421:(help)
1574040987082:[:x (when false :y)]
1574041015031:(:text nil)
1574041024999:(keys nil)
1574041225164:(defn is-bare? (comp nil? #(every? empty? (vals %))))
1574041251819:(def is-bare? (comp nil? #(every? empty? (vals %))))
1574041276892:(is-bare? {:k "" :d []})
1574041382370:(defn is-bare? [t] (every? empty? (vals t)))
1574041415082:(def is-nil-or-bare? #(or (nil? %) (is-bare? %)))
1574041477134:(remove is-nil-or-bare? [nil nil {:text "Hi." :branches []} nil {:text "" :branches []} nil])
1574042311948:(defn splice [coll start stop]\n  (take (- stop start) (drop start coll)))\n\n(splice coll 6 10)
1574078400521:(-indexOf "I am the best." "the best.")
1574078420432:(-indexOf "I am the best." "the"\n          )
1574078460821:(.indexOf "I am the best." "the best.")
1574117093147:(reload-config)
1574117166274:(reset-autobuild)
1574120632174:(def search-term "with")
1574120673703:(def text "I am peeling honeycrisps for apple crisp. Within minutes, my hands drip with juice. My father is at the counter, making the 'crisp' part of the dessert, with cane sugar, cinnamon, lemon juice, almonds, and oats. We are listening to jazz, something calm yet dramatic, with big pockets of pregnant silence.")
1574120684231:(map #(subs % (.indexOf % search-term)) text)
1574120735605:(defn sentence-split\n  "Splits a body of text on delimiters: ('.'|'!'|'?')"\n  [text]\n  (map str/trim\n       (re-seq #"\\(?[^\\.\\?\\!]+[\\.!\\?]\\)?" text)))
1574120746972:(:require [clojure.string :as str])
1574120748983:(defn sentence-split\n  "Splits a body of text on delimiters: ('.'|'!'|'?')"\n  [text]\n  (map str/trim\n       (re-seq #"\\(?[^\\.\\?\\!]+[\\.!\\?]\\)?" text)))
1574120780929:(defn sentence-split\n  "Splits a body of text on delimiters: ('.'|'!'|'?')"\n  [text]\n  (map clojure.string/trim\n       (re-seq #"\\(?[^\\.\\?\\!]+[\\.!\\?]\\)?" text)))
1574120791860:(def sentences (sentence-split text))
1574120795392:sentences
1574120847640:(filter #(str/includes? % search-term) sentences)
1574120865605:(filter #(clojure.string/includes? % search-term) sentences)
1574120908571:(map #(subs % (.indexOf % search-term)) (filter #(clojure.string/includes? % search-term) sentences))
1574124397758:(boolean "")
1574124404878:(boolean "hi")
1574169835109:(clojure.string/lower-case \\C)
1574170014792:(empty? c)
1574170021656:(empty? \\\n        \n    c)
1574170029333:(empty? \\c)
1574170045004:(empty? "")
1574376093974:(use 'clojure.pprint)
1574540456872:(.indexOf "hello" "el")
1574540487438:(.indexOf "hellohello" "el")
1574540518632:(def prev (.indexOf "hellohello" "el" ))
1574540522489:prev
1574540538178:(.indexOf "hellohello" "el" prev)
1574540560150:(.indexOf "hellohello" "el" (+ prev (count prev)))
1574540575385:(.indexOf "hellohello" "el" (+ prev (count "el"\n                                           )))
1574540776400:(.indexOf "hellohello" "1\n")
1574540858574:(defn get-phrases\n  [sentence term]\n  (loop [phrases []\n         idx (.indexOf sentence term)]\n    (if (= -1 idx)\n      phrases\n      (recur (.indexOf sentence term (+ idx (count term)))))))
1574540914069:(defn get-phrases\n  [sentence term]\n  (loop [phrases []\n         idx (.indexOf sentence term)]\n    (if (= -1 idx)\n      phrases\n      (recur (subs sentence idx) \n             (.indexOf sentence term (+ idx (count term)))))))
1574540934786:(get-phrases "hellohello" "el")
1574540959630:(defn get-phrases\n  [sentence term]\n  (loop [phrases []\n         idx (.indexOf sentence term)]\n    (if (= -1 idx)\n      phrases\n      (recur (conj phrases (subs sentence idx))\n             (.indexOf sentence term (+ idx (count term)))))))
1574540962887:(get-phrases "hellohello" "el")
1574541193647:(defn gen\n  [sentences term]\n  (let [pattern (re-pattern (str "(?i)\\\\b" term "\\\\b"))]\n    (mapcat get-phrases sentences)))
1574541219723:(def sentences ["My face is still hot, though many minutes have passed."\n                "A part of me is furious at my step-mother for introducing that girl to me, with the purpose of getting us together."\n                "The rest wants to place the cool end of a pistol to my temple, and squeeze."\n                "Both women have left me now, and I sit glowing with shame and fury, the skin of my face tightening."\n                "It feels at times that I am a glass figurine."\n                "Every gaze in the room that spins in my direction sees not a man, but a vitreous tube, a beaker full of liquids roiling odiously."\n                "My shame is plain on my face, a neon anti-advert, broadcasting something you'd surely live better without."\n                "'Nothing is worse than being ugly,' I think, deaf to how silly and vain I sound."])
1574541234062:(gen sentences "have")
1574541243935:(gen sentences "My")
1574541305324:(defn gen\n  [sentences term]\n  (let [pattern (re-pattern (str "(?i)\\\\b" term "\\\\b"))]\n    (mapcat #(get-phrases % term) sentences)))
1574541308352:(gen sentences "have")
1574541321124:(gen sentences "with\n")
1574541326598:(gen sentences "with")
1574553479882:(.-source "\\\\w+")
1574553508147:(.-source #"\\\\w+")
1574553517943:(.-source #"\\w+")
1574554017389:(defn re-pos\n  "Get position of regex match."\n  [s re]\n  (let [re (js/RegExp. (.-source re) "gi" )]\n    (loop [res []]\n      (if-let [m (.exec re s)]\n        (recur (conj res (subs s (.-index m))))\n        res))))
1574554077107:(re-pos "hellohellohello" "el")
1574554124229:(re-pos "hellohellohello" #"\\bel\\b")
1574554196491:(re-pos "hellohellohello" (re-pattern (str "\\\\b" "el" "\\\\b")))
1574554425559:(defn get-phrases\n  "Get position of regex match."\n  [s re]\n  (let [re (js/RegExp. (.-source re) "gi" )]\n    (loop [res []]\n      (if-let [m (.exec re s)]\n        (do (println m)\n        (recur (conj res (subs s (.-index m)))))\n        res))))
1574554549400:(get-phrases "hellohellohello" (re-pattern (str "\\\\b" "el" "\\\\b")))
1574554571745:(re-pattern (str "\\\\b" "el" "\\\\b")\n            )
1574554659795:(js/RegExp. (.-source #"\\bel\\b") "gi" )
1574554673152:(js/RegExp. (.-source #"\\bel\\b") "gi")
1574554720991:(let [re (js/RegExp. (.-source #"\\bel\\b") "gi")]\n  (.exec re "hellohellohello"))
1574554757391:(let [re (js/RegExp. #"\\bel\\b" "gi")]\n  (.exec re "hellohellohello"))
1574554771377:(let [re (js/RegExp. "\\\\bel\\\\b" "gi")]\n  (.exec re "hellohellohello"))
1574554800696:(let [re (js/RegExp. "\\\\bel\\\\b" "gi")]\n  (.-index (.exec re "hellohellohello")))
1574554825709:(let [re (js/RegExp. "\\\\bel\\\\b" "gi")]\n  (.-index (.exec re "h el loh el lo hello")))
1574554857645:(get-phrases "helloh el loh el lo" (re-pattern (str "\\\\b" "el" "\\\\b")))
1574555012700:(defn gen\n  [sentences term]\n  (let [pattern (re-pattern (str "\\\\b" term "\\\\b"))]\n    (mapcat #(get-phrases % pattern) sentences)))
1574555023078:(gen sentence "with")
1574555029038:(gen sentences "with")
1574555045095:(def sentences ["My face is still hot, though many minutes have passed."\n                "A part of me is furious at my step-mother for introducing that girl to me, with the purpose of getting us together."\n                "The rest wants to place the cool end of a pistol to my temple, and squeeze."\n                "Both women have left me now, and I sit glowing with shame and fury, the skin of my face tightening."\n                "It feels at times that I am a glass figurine."\n                "Every gaze in the room that spins in my direction sees not a man, but a vitreous tube, a beaker full of liquids roiling odiously."\n                "My shame is plain on my face, a neon anti-advert, broadcasting something you'd surely live better without."\n                "'Nothing is worse than being ugly,' I think, deaf to how silly and vain I sound."])
1574555051338:(gen sentences "with")
1574555110563:(gen ["I am the best boy." "I am the best, I am the best boy!"] "with")
1574555124961:(gen ["I am the best boy." "I am the best, I am the best boy!"] "I am")
1574556655375:(seqable? "s")
1574601613161:(stop-autobuild)
1574601727232:(start-autobuild)
1574601741964:(stop-autobuild)
1574610249918:(clojure.string/split "I am the best dude around! What is up? Emmanuel, how are you?" #"\\W+")
1574611104911:(defn suffix-tree\n  ([] {:text "", :branches []})\n  ([p] {:text p, :branches []})\n  ([p b] {:text p, :branches b}))
1574611121050:(defn a (suffix-tree "I am the best"))
1574611171045:(def a (suffix-tree "I am the best"))
1574611173350:a
1574611187036:(def b (suffix-tree "The sky is gray"))
1574611199074:(def c (suffix-tree "Nothing is real"))
1574611236810:(def coll [a b c])
1574611238386:coll
1574611249355:(map vector (range 0 (count coll)) (map #(first-word (:text %)) coll))
1574611257687:(def first-word\n  "Gets the first word from a string."\n  [s]\n  (re-find #"\\W" s))
1574611268897:(defn first-word\n  "Gets the first word from a string."\n  [s]\n  (re-find #"\\W" s))
1574611272596:(map vector (range 0 (count coll)) (map #(first-word (:text %)) coll))
1574611303456:(defn first-word\n  "Gets the first word from a string."\n  [s]\n  (re-find #"\\w+" s))
1574611306211:(map vector (range 0 (count coll)) (map #(first-word (:text %)) coll))
1574611836980:(defn get-branch\n  "Finds the index of the string whose first char matches the target char."\n  [coll target]\n  (loop [indices-and-first-words (map vector (range 0 (count coll)) (map #(first-word (:text %)) coll))]\n    (let [i&fw (first indices-and-first-words)]\n      (cond\n      (empty? coll) nil\n      (= target (get i&fw 1)) i&fw\n      :else (recur (rest indices-and-first-words)))))\n  )
1574611868388:coll
1574611879768:(get-branch coll "I")
1574611885535:(get-branch coll "Th")
1574611948589:(defn get-branch\n  "Finds the index of the string whose first char matches the target char."\n  [coll target]\n  (loop [indices-and-first-words (map vector (range 0 (count coll)) (map #(first-word (:text %)) coll))]\n    (let [i&fw (first indices-and-first-words)]\n      (cond \n        (empty? indices-and-first-words) nil \n        (= target (get i&fw 1)) i&fw \n        :else (recur (rest indices-and-first-words))))))
1574611956645:)
1574611977513:(defn get-branch\n  "Finds the index of the string whose first char matches the target char."\n  [coll target]\n  (loop [indices-and-first-words (map vector (range 0 (count coll)) (map #(first-word (:text %)) coll))]\n    (let [i&fw (first indices-and-first-words)]\n      (cond \n        (empty? indices-and-first-words) nil \n        (= target (get i&fw 1)) i&fw \n        :else (recur (rest indices-and-first-words))))))
1574612057189:(defn first-word\n  "Gets the first word from a string."\n  [s]\n  (re-find #"w+" s))\n\n(defn get-branch\n  "Finds the index of the string whose first char matches the target char."\n  [coll target]\n  (loop [indices-and-first-words (map vector (range 0 (count coll)) (map #(first-word (:text %)) coll))]\n    (let [i&fw (first indices-and-first-words)]\n      (cond\n        (empty? indices-and-first-words) nil\n        (= target (get i&fw 1)) i&fw\n        :else (recur (rest indices-and-first-words))))))
1574612082865:(defn suffix-tree\n  ([] {:text "", :branches []})\n  ([p] {:text p, :branches []})\n  ([p b] {:text p, :branches b}))
1574612154028:(def trees [(suffix-tree "Deep anhedonia.") (suffix-tree "Nothing is real?") (suffix-tree "No god, I don't think."])
1574612162070:(def trees [(suffix-tree "Deep anhedonia.") (suffix-tree "Nothing is real?") (suffix-tree "No god, I don't think.")])
1574612164000:trees
1574612181718:(get-branch trees "Nothing")
1574612296235:(defn first-word\n  "Gets the first word from a string."\n  [s]\n  (re-find #"\\w+" s))
1574612298314:(get-branch trees "Nothing")
1574612307442:(get-branch trees "Deep")
1574612313344:(get-branch trees "No")
1574612316643:(get-branch trees "Not")
1574612627628:(clojure.string/split "deep anhedonia of the mind." #"\\W+")
1574641033917:(sort ["a man a plan panama" "A man a plan panama, cabana." "B man a." "Hey."])
1574641212586:(reload-config)
1574641311328:(reset-autobuild)
1574641932400:(sort #(if (> (count %1) (count %2)) %1 %2) ["a man a plan panama" "A man a plan panama, cabana." "B man a." "Hey."])
1574642081524:(sort-by count ["a man a plan panama" "A man a plan panama, cabana." "B man a." "Hey."])
1574642337192:(sort-by count < ["a man a plan panama" "A man a plan panama, cabana." "B man a." "Hey."])
1574642348918:(sort-by count > ["a man a plan panama" "A man a plan panama, cabana." "B man a." "Hey."])
1574644475908:([1 2 3 4 5] 0)
1574686285684:(defn get-fork\n  "Returns the index where two strings diverge."\n  [s1 s2]\n  (loop [a s1\n         b s2\n         i 0]\n    (if (or (or (empty? a) (empty? b))\n            (not= (first a) (first b)))\n      i                                                     ;; get len of matchuptobeginningoflastword of s1[0:i]\n      (recur (rest a)\n             (rest b)\n             (inc i)))))
1574686303707:(get-fork "From the beginning")
1574686312637:(get-fork "From the beginning" "From the end")
1574686341871:(get-fork " From the beginning" " From the end")
1574686347635:(get-fork " From the beginning" "From the end")
1574686363471:(get-fork "From the beginning" "From the end")
1574686386486:(defn cut-at\n  "Cuts string at the given index."\n  [s i]\n  [(get-prefix s i) (get-suffix s i)])
1574686401509:(defn get-prefix\n  "Gets substring of S from zero up to index I"\n  [s i]\n  (subs s 0 i))\n\n(defn get-suffix\n  "Gets rest of string S after and including the character at index I"\n  [s i]\n  (subs s i))\n\n(defn cut-at\n  "Cuts string at the given index."\n  [s i]\n  [(get-prefix s i) (get-suffix s i)])
1574686432496:(cut-at "From the beginning" 9)
1574686456675:(defn first-word\n  "Gets substring upto end of first word from a string."\n  [s]\n  (re-find #"[\\W+]*\\w+" s))
1574686470428:(first-word "From the beginning")
1574686476771:(first-word " From the beginning")
1574686483884:(first-word ", From the beginning")
1574686563074:(defn suffix-tree\n  ([] {:text "", :branches []})\n  ([p] {:text p, :branches []})\n  ([p b] {:text p, :branches b}))
1574686632685:(def a (suffix-tree "From " ["the beginning" "here on out"]))
1574686634073:a
1574686661776:(defn get-branch\n  "Finds the index of the string whose first \\s+word matches the target \\s+word."\n  [coll target]\n  (loop [indices-and-first-words (map vector (range 0 (count coll)) (map #(take (count target) (:text %)) coll))]\n    (let [[i fw] (first indices-and-first-words)]\n      (cond\n        (empty? indices-and-first-words) nil\n        (= target fw) i\n        :else (recur (rest indices-and-first-words))))))
1574686747958:(defn get-branch\n  "Finds the index of the string whose first word matches the target word."\n  [coll target]\n  (loop [indices-and-first-words (map vector (range 0 (count coll)) (map #(take (count target) (:text %)) coll))]\n    (let [[i fw] (first indices-and-first-words)]\n      (cond\n        (empty? indices-and-first-words) nil\n        (= target fw) i\n        :else (recur (rest indices-and-first-words))))))
1574686769551:a
1574686790549:(get-branch [a] "the")
1574686887481:(def a (suffix-tree "From " [(suffix-tree "the beginning") (suffix-tree "here on out")]))
1574686888511:a
1574686931384:(get-branch (:branches a) "the")
1574686990074:(take (count "the") "the beginning")
1574687016213:(= "the" '("t" "h" "e"))
1574687027078:(= "the" (str '("t" "h" "e")))
1574687042628:(str '("t" "h" "e"))
1574687067678:(clojure.string/join '("t" "h" "e"))
1574687232182:(defn get-branch\n  "Finds the index of the string whose first word matches the target word."\n  [coll v]\n  (loop [indexed-branch-bases (map vector (range 0 (count coll)) (map #(str/join (take (count v) (:text %))) coll))]\n    (let [[i fw] (first indexed-branch-bases)]\n      (cond\n        (empty? indexed-branch-bases) nil\n        (= v fw) i\n        :else (recur (rest indexed-branch-bases))))))
1574687261247:(defn get-branch\n  "Finds the index of the string whose first word matches the target word."\n  [coll v]\n  (loop [indexed-branch-bases (map vector (range 0 (count coll)) (map #(clojure.string/join (take (count v) (:text %))) coll))]\n    (let [[i fw] (first indexed-branch-bases)]\n      (cond\n        (empty? indexed-branch-bases) nil\n        (= v fw) i\n        :else (recur (rest indexed-branch-bases))))))
1574687272587:(get-branch (:branches a) "the")
1574689530082:(start-autobuild)
1574689924573:(- (count "the world") (count "he world"))
1574690270972:(defn get-branch2.0\n  [B v]\n  (loop [coll B]\n    (let [b (:text (first coll))] \n      (cond \n        (empty? coll) nil\n        (clojure.string/starts-with? b v) (- (count B) (count coll))\n        :else (recur (rest coll))))))
1574690288647:(defn get-branch\n  [B v]\n  (loop [coll B]\n    (let [b (:text (first coll))] \n      (cond \n        (empty? coll) nil\n        (clojure.string/starts-with? b v) (- (count B) (count coll))\n        :else (recur (rest coll))))))
1574690296972:(get-branch (:branches a) "the")
1574690316011:(def a (suffix-tree "From " [(suffix-tree "the beginning") (suffix-tree "here on out")]))
1574690330022:(def a (suffix-tree "From " [(suffix-tree "the beginning") (suffix-tree "here on out")]))(defn suffix-tree\n  ([] {:text "", :branches []})\n  ([p] {:text p, :branches []})\n  ([p b] {:text p, :branches b}))
1574690378706:
1574690387510:(def a (suffix-tree "From " [(suffix-tree "the beginning") (suffix-tree "here on out")]))
1574690392063:(get-branch (:branches a) "the")
1574690403720:(get-branch (:branches a) "here")
1574723475559:(:tree {:tree "hello"})
1574723494422:(:a (:a 1))
1574723516899:(:a {:a 1})
1574723538641:(+ 1 1 1 1 1 1 1 1 1 )
1574723567540:(filter? even? (range 100))
1574723574370:(filter even? (range 100))
1574723636431:(def coll (range 10))
1574723663262:(map #(* %1 %2) *1)
1574723671604:(mapv #(* %1 %2) *1)
1574723695070:(map #(* %1 %2) (vec *1))
1574724269247:(map #(* %1 %1) (vec *1))
1574724280165:(map #(* %1 %1) (range 10))
1574724306740:(reduce #(* %1 %2) 1 (range 10))
1574724338533:(reduce #(* %1 (inc %2)) 1 (range 10))
1574729765300:(defn vec-remove\n  "Removes element from vector."\n  [coll pos]\n  (vec (concat (subvec (vec coll) 0 pos) (subvec (vec coll) (inc pos)))))
1574729812924:(vec-remove '(0 1 2 3 4 5 6 7 8 9 10) 2)
1574729821771:(vec-remove '(0 1 2 3 4 5 6 7 8 9 10) 4)
1574729832306:(vec-remove '(0 1 2 3 4 5 6 7 8 9 10) 2)
1574729885120:(do flat)
1574729893684:(apropos flat)
1574729921973:(flatten [[] [[2 3 4] [4 5]] [1]])
1574730354880:(get '(0 1 2 3 4 5) 2)
1574730379886:(nth '(0 1 2 3 4 5) 2)
1574730392319:(nth [0 1 2 3 4 5] 2)
1575037126452:(defn first-word\n  "Gets substring of s up to end of first word."\n  [s]\n  (re-find #"[\\W+]*\\w+" s))
1575037136656:(first-word "I am the best")
1575037146306:(first-word "Hey, I am the best")
1575037159404:(first-word ".")
1575128090433:(defn first-word\n  "Gets substring of s up to end of first word."\n  [s]\n  (re-find #"[\\W+]*\\w+" s))
1575128093204:(defn first-word\n  "Gets substring of s up to end of first word."\n  [s]\n  (re-find #"((,\\s)?\\w+(\\'[a-z])?|.)" s))
1575128106640:(first-word "I am bored.")
1575128124598:(first-word "I am bored, but I am also excited.")
1575128285709:(defn first-word\n  "Gets substring of s up to end of first word."\n  [s]\n  (re-find #"(,?\\s?\\w+(\\'[a-z])?|.)" s))
1575128287892:(first-word "I am bored, but I am also excited.")
1575128320068:(defn first-word\n  "Gets substring of s up to end of first word."\n  [s]\n  (re-find #",?\\s?\\w+(\\'[a-z])?|." s))
1575128323061:(first-word "I am bored, but I am also excited.")
1575128486491:(defn first-word\n  "Gets substring of s up to end of first word."\n  [s]\n  (re-find #",?\\s?\\w+(\\'[a-z])?|." s))
1575128489035:(first-word "I am bored, but I am also excited.")
1575128505048:(first-word "I am bored, but let's have a good time anyways.")
1575128521008:(first-word " let's have a good time anyways.")
1575130758028:(first-word "let's go to the ballgame.")
1575134115103:(if 0 true false)
1575134123428:(if nil true false)
1575145601275:(first-word "i'm also excited")
1575145620280:(defn first-word\n  "Gets substring of s up to end of first word."\n  [s]\n  (first (re-find #",?\\s?\\w+(\\'[a-z])?|." s)))
1575145623207:(first-word "i'm also excited")
1575215894811:#(0)
1575215902036:(#(0))
1575215916114:((fn [] 0))
1575220647533:(let [pattern (re-pattern (str "(?<!\\\\w)" "h"  "[\\\\w\\\\']*"))]\n  (distinct (re-seq pattern "hi, hello, heyo, high, height, hip, hither, hat, that, weight, too, sew, mew, death, kiss, wither.")))
1575220675398:(let [pattern (re-pattern (str "(?<!\\\\w)" "he"  "[\\\\w\\\\']*"))]\n  (distinct (re-seq pattern "hi, hello, heyo, high, height, hip, hither, hat, that, weight, too, sew, mew, death, kiss, wither.")))
1575220687106:(let [pattern (re-pattern (str "(?<!\\\\w)" "hi"  "[\\\\w\\\\']*"))]\n  (distinct (re-seq pattern "hi, hello, heyo, high, height, hip, hither, hat, that, weight, too, sew, mew, death, kiss, wither.")))
1575221042538:(not "")
1575221181375:(mapv inc '(1 2 3 4 5))
1575221204451:(vec '(1 2 3 4 5))
1575222737272:(str "hello" nil)
1575223321958:(def v [1 2 3 4])
1575223365547:(def i 0)
1575223385416:(def i (atom 0))
1575223387356:i
1575223390683:@i
1575223475524:(swap! i #(mod (inc @%) (count v)))
1575223485118:(swap! i #(mod (inc @i) (count v)))
1575223508323:(swap! i #(mod (inc %) (count v)))
1575235121040:(some? "")
1575235170580:(not-empty "")
1575235187856:(not (empty? ""))
